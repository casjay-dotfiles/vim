# Global snippets
#question
snippet printf_question
    printf_read_question "color" "message" "maxLines" "answerVar" "readopts"
endsnippet

snippet printf_yes
    printf_answer_yes "var" "response"
endsnippet

# time
snippet dte "date"
    `strftime("%m/%d/%Y")`
endsnippet

snippet tme "time"
    `strftime("%H:%M")`
endsnippet

snippet now
    `strftime("%A, %b %d, %Y %H:%M %Z")`
endsnippet

snippet NOWDATE
	`strftime("%m/%d/%Y %H:%M")`
endsnippet

snippet setver
    `!v strftime("%Y%m%d%H%M")`-git
endsnippet

# attentions
snippet todo
    TODO: ${1}
endsnippet

snippet fixme
    FIXME: ${1}
endsnippet

snippet xxx
    XXX: ${1}
endsnippet

snippet hack
    HACK: ${1}
endsnippet

snippet note
    NOTE: ${1}
endsnippet

snippet bug
    BUG: ${1}
endsnippet

snippet wip
    WIP: ${1}
endsnippet

snippet vim_comment
	"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	" => ${1}
	"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
endsnippet

snippet box2 "Box"
    `!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
    │ $1 │
    `!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
    $0
endsnippet

snippet blogpost
---
title: $1
date: "`!v strftime("%Y-%m-%d")`"
author: "$2"
tags: [blog]
categories: [personal, ]
comments: true
---

$5

endsnippet

snippet header
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : `!v strftime("%Y%m%d%H%M")`-git
# @Author        : {{NAME}}
# @Contact       : {{EMAIL}}
# @License       : {{LICENSE}}
# @ReadME        : {{FILE}} --help
# @Copyright     : {{COPYRIGHT}} {{YEAR}}, {{COMPANY}}
# @Created       : {{TIMESTAMP}}
# @File          : {{FILE}}
# @Description   : {{CURSOR}}
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

endsnippet

snippet bash.script "shell"
#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="$(basename "$\0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : `!v strftime("%Y%m%d%H%M")`-git
# @Author        : {{NAME}}
# @Contact       : {{EMAIL}}
# @License       : {{LICENSE}}
# @ReadME        : {{FILE}} --help
# @Copyright     : {{COPYRIGHT}} {{YEAR}}, {{COMPANY}}
# @Created       : {{TIMESTAMP}}
# @File          : {{FILE}}
# @Description   : {{CURSOR}}
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for needed applications
__cmd_exists bash || exit 1 # exit 1 if not found
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set variables
{{FILE}}_CONFIG_DIR="$HOME/.config/{{FILE}}/settings.conf"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# bring in user config
[ -f "{{FILE}}_CONFIG_DIR/settings.conf" ] && . "{{FILE}}_CONFIG_DIR/settings.conf"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
#vim :TemplateExpand

endsnippet

snippet shell.script "shell"
#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="{{FILE}}"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : `!v strftime("%Y%m%d%H%M")`-git
# @Author        : {{NAME}}
# @Contact       : {{EMAIL}}
# @License       : {{LICENSE}}
# @ReadME        : {{FILE}} --help
# @Copyright     : {{COPYRIGHT}} {{YEAR}}, {{COMPANY}}
# @Created       : {{TIMESTAMP}}
# @File          : {{FILE}}
# @Description   : {{CURSOR}}
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for needed applications
cmd_exists bash || exit 1 # exit if not found
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set variables
{{FILE}}_CONFIG_DIR="$HOME/.config/{{FILE}}/settings.conf"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set functions
printf_color() { printf "%b" "$(tput setaf "\$1" 2>/dev/null)" "\t\t\$2\n" "$(tput sgr0 2>/dev/null)"; }
__version() {
  command="$(type -P "{{FILE}}")"
  grep -E '[".#] @[A-Z]' "$command"
  grep -E '[".#]#@[A-Z]' "$command"
}
__help() {
  printf_color "4" "$(grep ^"# @Description" "{{FILE}} | grep ' : " || {{FILE}} help)"
  printf_color "4" "usage: {{FILE}}  |  {{FILE}} --version"
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# bring in user config
[ -f "{{FILE}}_CONFIG_DIR/settings.conf" ] && . "{{FILE}}_CONFIG_DIR/settings.conf"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case "$1" in
--help)
  shift 1
  __help
  ;;
--version)
  shift 1
  __version
  ;;
*)
  exec ""
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end

endsnippet

